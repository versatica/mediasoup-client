/**
 * Extract plain RTP parameters from a SDP.
 *
 * @param {Object} sdpObj - SDP Object generated by sdp-transform.
 * @param {String} kind - media type.
 * @return {PlainRtpParameters}
 */
export function extractPlainRtpParametersByKind(sdpObj, kind)
{
	const mSection = (sdpObj.media || [])
		.find((m) => m.type === kind);

	if (!mSection)
		throw new Error(`m=${kind} section not found`);

	const plainRtpParameters =
	{
		ip   : sdpObj.connection.ip,
		port : mSection.port
	};

	return plainRtpParameters;
}

/**
 * Fill the given RTP parameters for the given media type.
 *
 * @param {RTCRtpParameters} rtpParameters -  RTP parameters to be filled.
 * @param {Object} sdpObj - Local SDP Object generated by sdp-transform.
 * @param {String} kind - media type.
 */
export function fillRtpParametersForKind(rtpParameters, sdpObj, kind)
{
	const rtcp =
	{
		cname       : null,
		reducedSize : true,
		mux         : true
	};

	const mSection = (sdpObj.media || [])
		.find((m) => m.type === kind);

	if (!mSection)
		throw new Error(`m=${kind} section not found`);

	// Get the SSRC and CNAME.

	const ssrcCnameLine = (mSection.ssrcs || [])
		.find((line) => line.attribute === 'cname');

	let ssrc;

	if (ssrcCnameLine)
	{
		ssrc = ssrcCnameLine.id;
		rtcp.cname = ssrcCnameLine.value;
	}

	// Fill RTP parameters.

	rtpParameters.rtcp = rtcp;
	rtpParameters.encodings = [];

	const encoding = { ssrc };

	rtpParameters.encodings.push(encoding);
}
