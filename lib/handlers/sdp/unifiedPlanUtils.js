/**
 * Fill the given RTP parameters for the given mid or sending track.
 *
 * @param {RTCRtpParameters} rtpParameters -  RTP parameters to be filled.
 * @param {Object} sdpObj - Local SDP Object generated by sdp-transform.
 * @param {MediaStreamTrack} track
 * @param {String} [mid]
 * @param {Array<RTCRtpEncodingParameters>} [encodings] - Optional already filled encodings.
 * @param {Boolean} [legacySimulcast] - As used by Chrome with SDP mangling.
 */
exports.fillRtpParametersForTrack = function(
	{
		rtpParameters,
		sdpObj,
		track,
		mid,
		encodings = null,
		legacySimulcast = false
	}
)
{
	const mSection = findMediaSection(sdpObj, track, mid);

	if (mid !== null && mid !== undefined)
		rtpParameters.mid = String(mid);

	rtpParameters.rtcp =
	{
		cname       : null,
		reducedSize : true,
		mux         : true
	};

	// Get the SSRC and CNAME.

	const ssrcCnameLine = (mSection.ssrcs || [])
		.find((line) => line.attribute === 'cname');

	if (!ssrcCnameLine)
		throw new Error('CNAME value not found');

	rtpParameters.rtcp.cname = ssrcCnameLine.value;

	// Standard simulcast based on a=simulcast and RID.
	if (!legacySimulcast)
	{
		// If encodings are already given (so RID usage) and there are more than just
		// one, just use them.
		if (Array.isArray(encodings) && encodings.length > 1)
		{
			rtpParameters.encodings = encodings;
		}
		// Otherwise assume no simulcast so get the media SSRC.
		// TODO: Get also RTX SSRC when browsers implement this.
		else
		{
			// Get first (and may be the only one) ssrc.
			const ssrc = ssrcCnameLine.id;
			const encoding = { ssrc };

			rtpParameters.encodings = [ encoding ];
		}
	}
	// Legacy simulcast based on multiple a=ssrc lines.
	else
	{
		// First media SSRC (or the only one).
		let firstSsrc;

		// Get all the SSRCs.

		const ssrcs = new Set();

		for (const line of mSection.ssrcs || [])
		{
			if (line.attribute !== 'msid')
				continue;

			const ssrc = line.id;

			ssrcs.add(ssrc);

			if (!firstSsrc)
				firstSsrc = ssrc;
		}

		if (ssrcs.size === 0)
			throw new Error('no a=ssrc lines found');

		// Get media and RTX SSRCs.

		const ssrcToRtxSsrc = new Map();

		// First assume RTX is used.
		for (const line of mSection.ssrcGroups || [])
		{
			if (line.semantics !== 'FID')
				continue;

			let [ ssrc, rtxSsrc ] = line.ssrcs.split(/\s+/);

			ssrc = Number(ssrc);
			rtxSsrc = Number(rtxSsrc);

			if (ssrcs.has(ssrc))
			{
				// Remove both the SSRC and RTX SSRC from the Set so later we know that they
				// are already handled.
				ssrcs.delete(ssrc);
				ssrcs.delete(rtxSsrc);

				// Add to the map.
				ssrcToRtxSsrc.set(ssrc, rtxSsrc);
			}
		}

		// If the Set of SSRCs is not empty it means that RTX is not being used, so take
		// media SSRCs from there.
		for (const ssrc of ssrcs)
		{
			// Add to the map.
			ssrcToRtxSsrc.set(ssrc, null);
		}

		// Fill RTP parameters.

		rtpParameters.encodings = [];

		for (const [ ssrc, rtxSsrc ] of ssrcToRtxSsrc)
		{
			const encoding = { ssrc };

			if (rtxSsrc)
				encoding.rtx = { ssrc: rtxSsrc };

			rtpParameters.encodings.push(encoding);
		}
	}
};

/**
 * Adds multi-ssrc based simulcast into the given SDP for the given mid or
 * track.
 * NOTE: This is for Chrome/Safari using Unified-Plan with legacy simulcast.
 *
 * @param {Object} sdpObj - Local SDP Object generated by sdp-transform.
 * @param {MediaStreamTrack} track
 * @param {Number} numStreams - Number of simulcast streams.
 * @param {String} [mid] - MID value.
 */
exports.addLegacySimulcast = function({ sdpObj, mid, track, numStreams })
{
	if (numStreams <= 1)
		return;

	const mSection = findMediaSection(sdpObj, track, mid);

	// Get the SSRC.

	const ssrcMsidLine = (mSection.ssrcs || [])
		.find((line) => line.attribute === 'msid');

	if (!ssrcMsidLine)
		throw new Error('a=ssrc line with msid information not found');

	const msid = ssrcMsidLine.value.split(' ')[0];
	const firstSsrc = ssrcMsidLine.id;
	let firstRtxSsrc;

	// Get the SSRC for RTX.

	(mSection.ssrcGroups || [])
		.some((line) =>
		{
			if (line.semantics !== 'FID')
				return;

			const ssrcs = line.ssrcs.split(/\s+/);

			if (Number(ssrcs[0]) === firstSsrc)
			{
				firstRtxSsrc = Number(ssrcs[1]);

				return true;
			}
		});

	const ssrcCnameLine = mSection.ssrcs
		.find((line) => (line.attribute === 'cname' && line.id === firstSsrc));

	if (!ssrcCnameLine)
		throw new Error('CNAME line not found');

	const cname = ssrcCnameLine.value;
	const ssrcs = [];
	const rtxSsrcs = [];

	for (let i = 0; i < numStreams; ++i)
	{
		ssrcs.push(firstSsrc + i);

		if (firstRtxSsrc)
			rtxSsrcs.push(firstRtxSsrc + i);
	}

	mSection.ssrcGroups = [];
	mSection.ssrcs = [];

	mSection.ssrcGroups.push(
		{
			semantics : 'SIM',
			ssrcs     : ssrcs.join(' ')
		});

	for (let i = 0; i < ssrcs.length; ++i)
	{
		const ssrc = ssrcs[i];

		mSection.ssrcs.push(
			{
				id        : ssrc,
				attribute : 'cname',
				value     : cname
			});

		mSection.ssrcs.push(
			{
				id        : ssrc,
				attribute : 'msid',
				value     : `${msid} ${track.id}`
			});
	}

	for (let i = 0; i < rtxSsrcs.length; ++i)
	{
		const ssrc = ssrcs[i];
		const rtxSsrc = rtxSsrcs[i];

		mSection.ssrcGroups.push(
			{
				semantics : 'FID',
				ssrcs     : `${ssrc} ${rtxSsrc}`
			});

		mSection.ssrcs.push(
			{
				id        : rtxSsrc,
				attribute : 'cname',
				value     : cname
			});

		mSection.ssrcs.push(
			{
				id        : rtxSsrc,
				attribute : 'msid',
				value     : `${msid} ${track.id}`
			});
	}
};

function findMediaSection(sdpObj, track, mid)
{
	let mSection;

	if (mid !== null && mid !== undefined)
	{
		mid = String(mid);

		mSection = (sdpObj.media || [])
			.find((m) => String(m.mid) === mid);

		if (!mSection)
			throw new Error(`SDP section with mid=${mid} not found`);
	}
	else
	{
		mSection = (sdpObj.media || [])
			.find((m) => (
				m.type === track.kind &&
				m.msid &&
				m.msid.split(' ')[1] === track.id
			));

		if (!mSection)
			throw new Error(`SDP section with a=msid containing track.id=${track.id} not found`);
	}

	return mSection;
}
